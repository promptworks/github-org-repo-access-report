doctype xml

audit
  title GitHub Access Audit
  description

  section#organization-attributes
    title Organization

    fact#organization-default-repo-persission
      title Default permission for members is `#{@org.default_repository_permission}`
      description
        | [Options](https://developer.github.com/v3/orgs/#edit-an-organization)

  section#organization-members
    title Organization members

    - @org_memberships.take(5).each do |membership|
      - user = @users_by_login.fetch(membership.user.login)

      section id=user.login
        title #{user.name} `#{user.login}`

        fact#belongs-to-org
          title belongs in this organization

          accept
            fact#has-role
              title has the role `#{membership.role}`

              - @possible_organization_member_roles.grep_v(membership.role).each do |role|
                modify id=role assign-to='admin'
                  title should have role `#{role}`

            section#teams
              title Teams user is on

              - teams_for_user_in_org(user).each do |team|
                fact id="belongs-to-team:#{team.slug}"
                  title belongs to team *#{team.name}*

  section#private-repositories
    title Private Repositories

    - @repos.take(5).each do |repo|
      section id=repo.name
        title = repo.name
        description
          p = repo.description
          p = repo.html_url

        section#teams
          title Teams that have access to `#{repo.name}`
          description = url_repo_collaboration(repo)

          - repo_teams = @teams_per_repo.fetch(repo.full_name).sort_by{|team| order_for_permission(team.permission) }
          - repo_teams.each do |team|
            section id=team.slug
              title = team.name
              description = url_org_team(team)

              fact#has-access
                title `#{team.name}` has access to this repo

                accept
                  fact#permission-level
                    title Permission level `#{team.permission}`

                    - @team_permission_options.grep_v(team.permission).each do |permission|
                      modify id="change-to:#{permission}"
                        title permission should be set to `#{permission}`

                reject Team access should be removed

          - if repo_teams.none?
            fact#no-teams-have-access
              title No teams have access to `#{repo.name}`

              reject: input Teams that should have access:


        section#collaborators
          title Collaborators
          description = url_repo_collaboration(repo)

          - collaborators = @collaborations.fetch(repo.full_name).sort_by{|c| -c.permissions.select(&:last).size }
          - collaborators.each do |collaborator|
            - user = @users_by_login.fetch(collaborator.login)
            section id=user.login
              title #{user.name} `#{user.login}`

              description
                p = user.html_url
                p
                  | via teams:
                  - teams_for_user_on_repo(user, repo).each do |team|
                    | `#{team.name}`

              fact#has-access-to-repo
                title has access to this repo

                accept
                  - permission_level = collaborator.permissions.detect(&:last).first
                  fact id="has-permission-level:#{permission_level}"
                    title has permission level #{permission_level}
                    description Permission levels url: ____

                    - collaborator.permissions.select(&:reject).map(&:first).each do |permission_name|
                      modify id=permission_name
                        | Set permission level to `#{permission_name}`

                reject This user should not have access to this repo

          - if collaborators.none?
            fact#has-no-collaborators
              title Repo has no collaborators...
              description ...other than users who have access to all repos due to being an organization admin or the organization having default permissions set to something other than than `none`.

              reject: input These collaborators should be added:
